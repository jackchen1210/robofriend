{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constants.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","id","name","user","react_default","a","createElement","className","alt","src","concat","CardList","robots","CardArray","map","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","searchfield","isPending","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.654dc326.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id,name,user})=>{\n\treturn (\n\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\t\n\t\t<img alt=\"robots\" src= {`https://robohash.org/${name}?set=set5&size=100x100`} />\n\t\t<div>\t\n\t\t\t<h2>{id}</h2>\n\t\t\t<p>{name}</p>\n\t\t</div>\n\t</div>\n\t);   \n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\n\n\tconst CardArray = robots.map((user,i)=>{\n\t\treturn (<Card key={robots[i].id} \n\t\t\t\t\t  id={robots[i].id} \n\t\t\t\t\t  name={robots[i].name}/>)});\n\n\treturn (\n\t\t<div>\n\t\t{CardArray}\n\t\t</div>\n\t\t);\n\t\t\n\t}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t<input className=\"b--green pa3 ba grow bg-light-blue\" \n\t\t\t   type=\"search\" \n\t\t   \t   placeholder=\"search robot friend\"\n\t\t   \t   onChange={searchChange}/>\n\t\t\n\t\t</div>\n\t\t);\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\nreturn (\n\t<div style={{overflowY:\"scroll\" , border:\"5px solid black\",height:\"500px\"}}>\n\t{props.children}\n\t</div>\n\t);\n};\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError : true});\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oooops! Something went wrong</h1>;\n\t\t}else{\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n}\n\nexport default ErrorBoundry;","import React,{Component} from 'react';\nimport CardList from '../components/CardList';\n//import {robots} from './robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {setSearchfield,requestRobots} from '../action.js';\nimport { connect} from 'react-redux';\n\nconst mapStateToProps = state =>{\n\treturn {\n\t\tsearchfield:state.searchRobots.searchfield,\n\t\trobots:state.requestRobots.robots,\n\t\tisPending:state.requestRobots.isPending,\n\t\terror:state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n\nreturn {\tonSearchChange: (event) => dispatch(setSearchfield (event.target.value)),\n\t\t\tonRequestRobots:()=> dispatch(requestRobots())\n}}\n\n\nclass App extends Component{\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst {onSearchChange,searchfield,robots,isPending} = this.props;\n\t\tconst filterRobots = robots.filter(robot =>{return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t\t});\n\n\t\tif(isPending){\n\t\t\treturn (<h1 className=\"tc\">Loading Page</h1>);\n\t\t}else\n\t\t{\t\n\t\t\treturn (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1>Robots Friends</h1>\n\t\t\t\t\t<SearchBox searchChange ={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t\t</ErrorBoundry>\t\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\n\t\tREQUIRE_ROBOTS_PENDING,\n\t\tREQUIRE_ROBOTS_SUCCESS,\n\t\tREQUIRE_ROBOTS_FAILED\n\n} from \"./constants.js\"\n\nexport const setSearchfield = (text) => \n{console.log(text);\n return {\n\ttype: CHANGE_SEARCH_FIELD ,\n\tpayload: text\n}}\n\n//HIGHER ORDER FUNCTION: a function returns function\nexport const requestRobots = ()=>(dispatch) =>\n{\n\tdispatch({type: REQUIRE_ROBOTS_PENDING});\n\t//GET API\n\tfetch('https://jsonplaceholder.typicode.com/users')\n  \t.then(response => response.json())\n  \t.then(data => dispatch({type: REQUIRE_ROBOTS_SUCCESS,payload:data}))\n  \t.catch(error => dispatch({type: REQUIRE_ROBOTS_FAILED,payload: error}))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUIRE_ROBOTS_PENDING = \"REQUIRE_ROBOTS_PENDING\";\nexport const REQUIRE_ROBOTS_SUCCESS = \"REQUIRE_ROBOTS_SUCCESS\";\nexport const REQUIRE_ROBOTS_FAILED = \"REQUIRE_ROBOTS_FAILED\";","import {CHANGE_SEARCH_FIELD,\n\t\tREQUIRE_ROBOTS_PENDING,\n\t\tREQUIRE_ROBOTS_SUCCESS,\n\t\tREQUIRE_ROBOTS_FAILED\n\n} from \"./constants.js\"\n\nconst initialStateSearch = {\n\tsearchfield : \"\"\n}\n\nexport const searchRobots = (state = initialStateSearch,action = {}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({},state,{searchfield : action.payload});\n\t\tdefault :\n\t\t\treturn state;\t\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending : false,\n\trobots : [],\n\terror : \"\"\n}\n\nexport const requestRobots = (state = initialStateRobots,action ={}) =>{\n\tswitch(action.type){\n\t\tcase REQUIRE_ROBOTS_PENDING:\n\t\t\treturn Object.assign({},state,{isPending:true});\n\t\tcase REQUIRE_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({},state,{robots:action.payload,isPending:false});\n\t\tcase REQUIRE_ROBOTS_FAILED:\n\t\t\treturn Object.assign({},state,{error:action.payload,isPending:false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react'; \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; //app become faster \nimport 'tachyons';\nimport App from './containers/App.js';\n//redux \n\t//action\nimport {Provider} from \"react-redux\";\n\t//Middleware\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\t//reducer\nimport {searchRobots,requestRobots} from \"./reducer\";\n\t//store\nimport {createStore , applyMiddleware,combineReducers} from \"redux\";\n\n//combine two reducers\nconst rootReducer = combineReducers({searchRobots,requestRobots});\n\nconst logger = createLogger();\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t<App/> \n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}